<?php
/**
 * EvalContext
 *
 * PHP version 7
 *
 * @category Class
 * @package  EspadaV8\PHPFlagr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EspadaV8\PHPFlagr\Model;

use \ArrayAccess;
use \EspadaV8\PHPFlagr\ObjectSerializer;

/**
 * EvalContext Class Doc Comment
 *
 * @category Class
 * @package  EspadaV8\PHPFlagr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvalContext implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'evalContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entityID' => 'string',
        'entityType' => 'string',
        'entityContext' => 'object',
        'enableDebug' => 'bool',
        'flagID' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entityID' => null,
        'entityType' => null,
        'entityContext' => null,
        'enableDebug' => null,
        'flagID' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityID' => 'entityID',
        'entityType' => 'entityType',
        'entityContext' => 'entityContext',
        'enableDebug' => 'enableDebug',
        'flagID' => 'flagID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityID' => 'setEntityID',
        'entityType' => 'setEntityType',
        'entityContext' => 'setEntityContext',
        'enableDebug' => 'setEnableDebug',
        'flagID' => 'setFlagID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityID' => 'getEntityID',
        'entityType' => 'getEntityType',
        'entityContext' => 'getEntityContext',
        'enableDebug' => 'getEnableDebug',
        'flagID' => 'getFlagID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityID'] = isset($data['entityID']) ? $data['entityID'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['entityContext'] = isset($data['entityContext']) ? $data['entityContext'] : null;
        $this->container['enableDebug'] = isset($data['enableDebug']) ? $data['enableDebug'] : null;
        $this->container['flagID'] = isset($data['flagID']) ? $data['flagID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityID'] === null) {
            $invalidProperties[] = "'entityID' can't be null";
        }
        if ((mb_strlen($this->container['entityID']) < 1)) {
            $invalidProperties[] = "invalid value for 'entityID', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ((mb_strlen($this->container['entityType']) < 1)) {
            $invalidProperties[] = "invalid value for 'entityType', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['flagID'] === null) {
            $invalidProperties[] = "'flagID' can't be null";
        }
        if (($this->container['flagID'] < 1)) {
            $invalidProperties[] = "invalid value for 'flagID', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entityID
     *
     * @return string
     */
    public function getEntityID()
    {
        return $this->container['entityID'];
    }

    /**
     * Sets entityID
     *
     * @param string $entityID entityID
     *
     * @return $this
     */
    public function setEntityID($entityID)
    {

        if ((mb_strlen($entityID) < 1)) {
            throw new \InvalidArgumentException('invalid length for $entityID when calling EvalContext., must be bigger than or equal to 1.');
        }

        $this->container['entityID'] = $entityID;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType entityType
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {

        if ((mb_strlen($entityType) < 1)) {
            throw new \InvalidArgumentException('invalid length for $entityType when calling EvalContext., must be bigger than or equal to 1.');
        }

        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets entityContext
     *
     * @return object
     */
    public function getEntityContext()
    {
        return $this->container['entityContext'];
    }

    /**
     * Sets entityContext
     *
     * @param object $entityContext entityContext
     *
     * @return $this
     */
    public function setEntityContext($entityContext)
    {
        $this->container['entityContext'] = $entityContext;

        return $this;
    }

    /**
     * Gets enableDebug
     *
     * @return bool
     */
    public function getEnableDebug()
    {
        return $this->container['enableDebug'];
    }

    /**
     * Sets enableDebug
     *
     * @param bool $enableDebug enableDebug
     *
     * @return $this
     */
    public function setEnableDebug($enableDebug)
    {
        $this->container['enableDebug'] = $enableDebug;

        return $this;
    }

    /**
     * Gets flagID
     *
     * @return int
     */
    public function getFlagID()
    {
        return $this->container['flagID'];
    }

    /**
     * Sets flagID
     *
     * @param int $flagID flagID
     *
     * @return $this
     */
    public function setFlagID($flagID)
    {

        if (($flagID < 1)) {
            throw new \InvalidArgumentException('invalid value for $flagID when calling EvalContext., must be bigger than or equal to 1.');
        }

        $this->container['flagID'] = $flagID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
