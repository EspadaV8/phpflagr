<?php
/**
 * VariantApi
 * PHP version 7
 *
 * @category Class
 * @package  EspadaV8\PHPFlagr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EspadaV8\PHPFlagr\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EspadaV8\PHPFlagr\ApiException;
use EspadaV8\PHPFlagr\Configuration;
use EspadaV8\PHPFlagr\HeaderSelector;
use EspadaV8\PHPFlagr\ObjectSerializer;

/**
 * VariantApi Class Doc Comment
 *
 * @category Class
 * @package  EspadaV8\PHPFlagr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VariantApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createVariant
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  \EspadaV8\PHPFlagr\Model\CreateVariantRequest $body create a variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EspadaV8\PHPFlagr\Model\Variant
     */
    public function createVariant($flagID, $body)
    {
        list($response) = $this->createVariantWithHttpInfo($flagID, $body);
        return $response;
    }

    /**
     * Operation createVariantWithHttpInfo
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  \EspadaV8\PHPFlagr\Model\CreateVariantRequest $body create a variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EspadaV8\PHPFlagr\Model\Variant, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVariantWithHttpInfo($flagID, $body)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant';
        $request = $this->createVariantRequest($flagID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Variant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVariantAsync
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  \EspadaV8\PHPFlagr\Model\CreateVariantRequest $body create a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVariantAsync($flagID, $body)
    {
        return $this->createVariantAsyncWithHttpInfo($flagID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createVariantAsyncWithHttpInfo
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  \EspadaV8\PHPFlagr\Model\CreateVariantRequest $body create a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVariantAsyncWithHttpInfo($flagID, $body)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant';
        $request = $this->createVariantRequest($flagID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVariant'
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  \EspadaV8\PHPFlagr\Model\CreateVariantRequest $body create a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createVariantRequest($flagID, $body)
    {
        // verify the required parameter 'flagID' is set
        if ($flagID === null || (is_array($flagID) && count($flagID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flagID when calling createVariant'
            );
        }
        if ($flagID < 1) {
            throw new \InvalidArgumentException('invalid value for "$flagID" when calling VariantApi.createVariant, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createVariant'
            );
        }

        $resourcePath = '/flags/{flagID}/variants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flagID !== null) {
            $resourcePath = str_replace(
                '{' . 'flagID' . '}',
                ObjectSerializer::toPathValue($flagID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVariant
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVariant($flagID, $variantID)
    {
        $this->deleteVariantWithHttpInfo($flagID, $variantID);
    }

    /**
     * Operation deleteVariantWithHttpInfo
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVariantWithHttpInfo($flagID, $variantID)
    {
        $returnType = '';
        $request = $this->deleteVariantRequest($flagID, $variantID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVariantAsync
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVariantAsync($flagID, $variantID)
    {
        return $this->deleteVariantAsyncWithHttpInfo($flagID, $variantID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVariantAsyncWithHttpInfo
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVariantAsyncWithHttpInfo($flagID, $variantID)
    {
        $returnType = '';
        $request = $this->deleteVariantRequest($flagID, $variantID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVariant'
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVariantRequest($flagID, $variantID)
    {
        // verify the required parameter 'flagID' is set
        if ($flagID === null || (is_array($flagID) && count($flagID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flagID when calling deleteVariant'
            );
        }
        if ($flagID < 1) {
            throw new \InvalidArgumentException('invalid value for "$flagID" when calling VariantApi.deleteVariant, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'variantID' is set
        if ($variantID === null || (is_array($variantID) && count($variantID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variantID when calling deleteVariant'
            );
        }
        if ($variantID < 1) {
            throw new \InvalidArgumentException('invalid value for "$variantID" when calling VariantApi.deleteVariant, must be bigger than or equal to 1.');
        }


        $resourcePath = '/flags/{flagID}/variants/{variantID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flagID !== null) {
            $resourcePath = str_replace(
                '{' . 'flagID' . '}',
                ObjectSerializer::toPathValue($flagID),
                $resourcePath
            );
        }
        // path params
        if ($variantID !== null) {
            $resourcePath = str_replace(
                '{' . 'variantID' . '}',
                ObjectSerializer::toPathValue($variantID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findVariants
     *
     * @param  int $flagID numeric ID of the flag (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EspadaV8\PHPFlagr\Model\Variant[]
     */
    public function findVariants($flagID)
    {
        list($response) = $this->findVariantsWithHttpInfo($flagID);
        return $response;
    }

    /**
     * Operation findVariantsWithHttpInfo
     *
     * @param  int $flagID numeric ID of the flag (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EspadaV8\PHPFlagr\Model\Variant[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findVariantsWithHttpInfo($flagID)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant[]';
        $request = $this->findVariantsRequest($flagID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Variant[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findVariantsAsync
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findVariantsAsync($flagID)
    {
        return $this->findVariantsAsyncWithHttpInfo($flagID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findVariantsAsyncWithHttpInfo
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findVariantsAsyncWithHttpInfo($flagID)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant[]';
        $request = $this->findVariantsRequest($flagID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findVariants'
     *
     * @param  int $flagID numeric ID of the flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findVariantsRequest($flagID)
    {
        // verify the required parameter 'flagID' is set
        if ($flagID === null || (is_array($flagID) && count($flagID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flagID when calling findVariants'
            );
        }
        if ($flagID < 1) {
            throw new \InvalidArgumentException('invalid value for "$flagID" when calling VariantApi.findVariants, must be bigger than or equal to 1.');
        }


        $resourcePath = '/flags/{flagID}/variants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flagID !== null) {
            $resourcePath = str_replace(
                '{' . 'flagID' . '}',
                ObjectSerializer::toPathValue($flagID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putVariant
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     * @param  \EspadaV8\PHPFlagr\Model\PutVariantRequest $body update a variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EspadaV8\PHPFlagr\Model\Variant
     */
    public function putVariant($flagID, $variantID, $body)
    {
        list($response) = $this->putVariantWithHttpInfo($flagID, $variantID, $body);
        return $response;
    }

    /**
     * Operation putVariantWithHttpInfo
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     * @param  \EspadaV8\PHPFlagr\Model\PutVariantRequest $body update a variant (required)
     *
     * @throws \EspadaV8\PHPFlagr\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EspadaV8\PHPFlagr\Model\Variant, HTTP status code, HTTP response headers (array of strings)
     */
    public function putVariantWithHttpInfo($flagID, $variantID, $body)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant';
        $request = $this->putVariantRequest($flagID, $variantID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Variant',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EspadaV8\PHPFlagr\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putVariantAsync
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     * @param  \EspadaV8\PHPFlagr\Model\PutVariantRequest $body update a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVariantAsync($flagID, $variantID, $body)
    {
        return $this->putVariantAsyncWithHttpInfo($flagID, $variantID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putVariantAsyncWithHttpInfo
     *
     *
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     * @param  \EspadaV8\PHPFlagr\Model\PutVariantRequest $body update a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVariantAsyncWithHttpInfo($flagID, $variantID, $body)
    {
        $returnType = '\EspadaV8\PHPFlagr\Model\Variant';
        $request = $this->putVariantRequest($flagID, $variantID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putVariant'
     *
     * @param  int $flagID numeric ID of the flag (required)
     * @param  int $variantID numeric ID of the variant (required)
     * @param  \EspadaV8\PHPFlagr\Model\PutVariantRequest $body update a variant (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putVariantRequest($flagID, $variantID, $body)
    {
        // verify the required parameter 'flagID' is set
        if ($flagID === null || (is_array($flagID) && count($flagID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flagID when calling putVariant'
            );
        }
        if ($flagID < 1) {
            throw new \InvalidArgumentException('invalid value for "$flagID" when calling VariantApi.putVariant, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'variantID' is set
        if ($variantID === null || (is_array($variantID) && count($variantID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variantID when calling putVariant'
            );
        }
        if ($variantID < 1) {
            throw new \InvalidArgumentException('invalid value for "$variantID" when calling VariantApi.putVariant, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putVariant'
            );
        }

        $resourcePath = '/flags/{flagID}/variants/{variantID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($flagID !== null) {
            $resourcePath = str_replace(
                '{' . 'flagID' . '}',
                ObjectSerializer::toPathValue($flagID),
                $resourcePath
            );
        }
        // path params
        if ($variantID !== null) {
            $resourcePath = str_replace(
                '{' . 'variantID' . '}',
                ObjectSerializer::toPathValue($variantID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
